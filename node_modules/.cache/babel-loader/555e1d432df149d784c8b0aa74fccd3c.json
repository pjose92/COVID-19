{"ast":null,"code":"var _jsxFileName = \"/Users/joseperez/Desktop/Lambda School/Git/COVID-19/src/components/Countries.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Helmet } from \"react-helmet\";\nimport lang from \"./lang\";\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Area, ResponsiveContainer, Legend } from \"recharts\";\n\nconst CountryDetails = props => {\n  const [languageCode, setLanguageCode] = useState(() => {\n    if (!localStorage.getItem(\"langCode\")) localStorage.setItem(\"langCode\", lang.defaultLanguage);\n    return localStorage.getItem(\"langCode\");\n  });\n  const [country, setCountry] = useState(\"\");\n  const [data, setData] = useState([]);\n  const language = lang[languageCode].CountryDetails;\n\n  const toggleLanguage = code => {\n    localStorage.setItem(\"langCode\", code);\n    setLanguageCode(localStorage.getItem(\"langCode\"));\n  };\n\n  const {\n    slug\n  } = props.match.params;\n\n  const getData = country => {\n    const confirmedRequest = axios.get(`https://api.covid19api.com/total/dayone/country/${country}/status/confirmed`);\n    const recoveredRequest = axios.get(`https://api.covid19api.com/total/dayone/country/${country}/status/recovered`);\n    const deathsRequest = axios.get(`https://api.covid19api.com/total/dayone/country/${country}/status/deaths`);\n    axios.all([confirmedRequest, recoveredRequest, deathsRequest]).then(axios.spread((...responses) => {\n      var _responses$1$data$;\n\n      setCountry((_responses$1$data$ = responses[1].data[0]) === null || _responses$1$data$ === void 0 ? void 0 : _responses$1$data$.Country);\n      setData(responses[0].data.map(confirmed => {\n        const recovered = responses[1].data.length ? responses[1].data.find(recovered => recovered.Date === confirmed.Date) : [];\n        const deaths = responses[2].data.length ? responses[2].data.find(death => death.Date === confirmed.Date) : [];\n        return {\n          date: confirmed.Date.substr(0, 10),\n          confirmed: confirmed.Cases,\n          recovered: (recovered === null || recovered === void 0 ? void 0 : recovered.Cases) || 0,\n          deaths: (deaths === null || deaths === void 0 ? void 0 : deaths.Cases) || 0\n        };\n      }));\n    }));\n  };\n\n  useEffect(() => {\n    getData(slug);\n  }, [slug]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, language.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lang\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, language.language, \":\", /*#__PURE__*/React.createElement(\"select\", {\n    value: languageCode,\n    onChange: e => toggleLanguage(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, lang.languageList.map(L => /*#__PURE__*/React.createElement(\"option\", {\n    key: L.code,\n    value: L.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, L.name)))))), /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, language.title(country)), /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"description\",\n    content: language.description(country),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"COVID-19 Spread in \", country), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    width: 400,\n    height: 250,\n    data: data,\n    margin: {\n      top: 10,\n      right: 30,\n      left: 0,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorUv\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#8884d8\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#8884d8\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorPv\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#82ca9d\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#82ca9d\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"confirmed\",\n    stroke: \"blue\",\n    fillOpacity: 0.2,\n    fill: \"skyblue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, \"Deaths and Recoveries\"), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    width: 400,\n    height: 250,\n    data: data,\n    margin: {\n      top: 10,\n      right: 30,\n      left: 0,\n      bottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorRecovered\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#8884d8\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#8884d8\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorDeaths\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#82ca9d\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#82ca9d\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"recovered\",\n    stroke: \"green\",\n    fillOpacity: 0.2,\n    fill: \"lightgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"deaths\",\n    stroke: \"crimson\",\n    fillOpacity: 0.1,\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CountryDetails;","map":{"version":3,"sources":["/Users/joseperez/Desktop/Lambda School/Git/COVID-19/src/components/Countries.js"],"names":["React","useEffect","useState","axios","Helmet","lang","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Area","ResponsiveContainer","Legend","CountryDetails","props","languageCode","setLanguageCode","localStorage","getItem","setItem","defaultLanguage","country","setCountry","data","setData","language","toggleLanguage","code","slug","match","params","getData","confirmedRequest","get","recoveredRequest","deathsRequest","all","then","spread","responses","Country","map","confirmed","recovered","length","find","Date","deaths","death","date","substr","Cases","title","e","target","value","languageList","L","name","description","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Helmet } from \"react-helmet\";\nimport lang from \"./lang\";\nimport {\n  AreaChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Area,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\n\nconst CountryDetails = (props) => {\n  const [languageCode, setLanguageCode] = useState(() => {\n    if (!localStorage.getItem(\"langCode\"))\n      localStorage.setItem(\"langCode\", lang.defaultLanguage);\n    return localStorage.getItem(\"langCode\");\n  });\n  const [country, setCountry] = useState(\"\");\n  const [data, setData] = useState([]);\n  const language = lang[languageCode].CountryDetails;\n\n  const toggleLanguage = (code) => {\n    localStorage.setItem(\"langCode\", code);\n    setLanguageCode(localStorage.getItem(\"langCode\"));\n  };\n\n  const { slug } = props.match.params;\n\n  const getData = (country) => {\n    const confirmedRequest = axios.get(\n      `https://api.covid19api.com/total/dayone/country/${country}/status/confirmed`\n    );\n    const recoveredRequest = axios.get(\n      `https://api.covid19api.com/total/dayone/country/${country}/status/recovered`\n    );\n    const deathsRequest = axios.get(\n      `https://api.covid19api.com/total/dayone/country/${country}/status/deaths`\n    );\n\n    axios.all([confirmedRequest, recoveredRequest, deathsRequest]).then(\n      axios.spread((...responses) => {\n        setCountry(responses[1].data[0]?.Country);\n        setData(\n          responses[0].data.map((confirmed) => {\n            const recovered = responses[1].data.length\n              ? responses[1].data.find(\n                  (recovered) => recovered.Date === confirmed.Date\n                )\n              : [];\n            const deaths = responses[2].data.length\n              ? responses[2].data.find((death) => death.Date === confirmed.Date)\n              : [];\n\n            return {\n              date: confirmed.Date.substr(0, 10),\n              confirmed: confirmed.Cases,\n              recovered: recovered?.Cases || 0,\n              deaths: deaths?.Cases || 0,\n            };\n          })\n        );\n      })\n    );\n  };\n\n  useEffect(() => {\n    getData(slug);\n  }, [slug]);\n\n  return (\n    <div>\n      <header>\n        <h1 className=\"title\">{language.title}</h1>\n        <div className=\"lang\">\n          <label>\n            {language.language}:\n            <select\n              value={languageCode}\n              onChange={(e) => toggleLanguage(e.target.value)}\n            >\n              {lang.languageList.map((L) => (\n                <option key={L.code} value={L.code}>\n                  {L.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </div>\n      </header>\n      <Helmet>\n        <title>{language.title(country)}</title>\n        <meta name=\"description\" content={language.description(country)} />\n      </Helmet>\n      <h3>COVID-19 Spread in {country}</h3>\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <AreaChart\n          width={400}\n          height={250}\n          data={data}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <defs>\n            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area\n            type=\"monotone\"\n            dataKey=\"confirmed\"\n            stroke=\"blue\"\n            fillOpacity={0.2}\n            fill=\"skyblue\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n      <h3>Deaths and Recoveries</h3>\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <AreaChart\n          width={400}\n          height={250}\n          data={data}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <defs>\n            <linearGradient id=\"colorRecovered\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"date\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area\n            type=\"monotone\"\n            dataKey=\"recovered\"\n            stroke=\"green\"\n            fillOpacity={0.2}\n            fill=\"lightgreen\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"deaths\"\n            stroke=\"crimson\"\n            fillOpacity={0.1}\n            fill=\"red\"\n          />\n          <Legend />\n        </AreaChart>\n      </ResponsiveContainer>\n      {/* <CanvasJSChart options={options} /> */}\n    </div>\n  );\n};\n\nexport default CountryDetails;"]},"metadata":{},"sourceType":"module"}